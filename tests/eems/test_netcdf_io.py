import tempfile
from pathlib import Path

import numpy
from netCDF4 import Dataset

from mpilot.libraries.eems.netcdf.io import EEMSWrite, EEMSRead
from ..utils import create_command_with_result

TEST_NETCDF_DIMENSIONS = (17, 11)


def test_eems_write():
    a_command = create_command_with_result(
        "AResult", numpy.ma.masked_array(numpy.random.rand(TEST_NETCDF_DIMENSIONS[1], TEST_NETCDF_DIMENSIONS[0]))
    )

    with tempfile.TemporaryDirectory() as temp_dir:
        nc_out = Path(temp_dir) / "out.nc"

        EEMSWrite("WriteResult").execute(
            OutFileName=str(nc_out),
            OutFieldNames=[a_command],
            DimensionFileName=Path(__file__).parent / "data" / "netcdf_test.nc",
            DimensionFieldName="elevation",
        )

        assert nc_out.exists()

        with Dataset(nc_out, "r") as ds:
            assert ds["AResult"].shape == tuple(reversed(TEST_NETCDF_DIMENSIONS))


def test_eems_read():
    in_file = Path(__file__).parent / "data" / "netcdf_test.nc"
    read_result = EEMSRead("ReadResult").execute(InFileName=str(in_file), InFieldName="elevation", DataType="Float")

    expected_result = numpy.ma.masked_array(
        numpy.array(
            [
                1776,
                1846,
                1844,
                1783,
                1802,
                1953,
                2058,
                2089,
                2153,
                2199,
                2186,
                2178,
                2198,
                2191,
                2160,
                2155,
                2142,
                1850,
                1911,
                1925,
                1877,
                1857,
                1810,
                1927,
                2002,
                2099,
                2253,
                2267,
                2275,
                2314,
                2318,
                2285,
                2259,
                2248,
                1932,
                1996,
                2063,
                2009,
                1926,
                1865,
                1820,
                1918,
                2003,
                2094,
                2146,
                2258,
                2343,
                2410,
                2404,
                2394,
                2397,
                1900,
                1967,
                2030,
                2062,
                1991,
                1972,
                1893,
                1856,
                1958,
                1998,
                2073,
                2153,
                2259,
                2348,
                2409,
                2417,
                2438,
                1950,
                2015,
                2090,
                2136,
                2075,
                1965,
                1951,
                1924,
                1882,
                1959,
                2067,
                2154,
                2129,
                2217,
                2229,
                2246,
                2240,
                2052,
                2113,
                2134,
                2184,
                2129,
                2125,
                2045,
                1993,
                1979,
                1923,
                1907,
                1986,
                2038,
                2137,
                2119,
                2178,
                2177,
                1992,
                2093,
                2223,
                2269,
                2258,
                2225,
                2196,
                2132,
                2100,
                2016,
                1996,
                1976,
                2015,
                2010,
                2000,
                2073,
                2114,
                2181,
                2054,
                2135,
                2221,
                2267,
                2268,
                2236,
                2196,
                2162,
                2075,
                2073,
                2096,
                2073,
                2119,
                2084,
                2106,
                2068,
                2209,
                2134,
                2121,
                2230,
                2307,
                2297,
                2260,
                2236,
                2208,
                2151,
                2166,
                2144,
                2131,
                2145,
                2154,
                2160,
                2139,
                2239,
                2241,
                2233,
                2286,
                2348,
                2347,
                2346,
                2291,
                2260,
                2226,
                2206,
                2184,
                2173,
                2169,
                2184,
                2180,
                2181,
                2229,
                2217,
                2231,
                2263,
                2266,
                2257,
                2304,
                2329,
                2319,
                2301,
                2294,
                2288,
                2252,
                2233,
                2197,
                2227,
                2232,
            ]
        )
    ).reshape(TEST_NETCDF_DIMENSIONS[1], TEST_NETCDF_DIMENSIONS[0])

    assert (read_result == expected_result).all()
